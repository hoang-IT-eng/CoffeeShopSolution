@model CoffeeShop.ViewModels.MenuItemViewModel

@{
    ViewData["Title"] = "Edit Menu Item";
}

<h1>@ViewData["Title"]</h1>

<h4>Menu Item: @Model.Name</h4>
<hr />
<div class="row">
    <div class="col-md-8">
        <form asp-action="Edit" asp-route-id="@Model.Id" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />

            <div class="form-group mb-3">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" type="number" step="0.01" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="ImageUrl" class="control-label"></label>
                <input asp-for="ImageUrl" class="form-control" />
                <span asp-validation-for="ImageUrl" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Category" class="control-label"></label>
                <input asp-for="Category" class="form-control" />
                <span asp-validation-for="Category" class="text-danger"></span>
            </div>
            <div class="form-group form-check mb-3">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsAvailable" /> @Html.DisplayNameFor(model => model.IsAvailable)
                </label>
            </div>

            <hr />
            <h4>Recipe Ingredients</h4>
            <div id="recipesContainer">
                @for (int i = 0; i < Model.Recipes.Count; i++)
                {
                    <div class="recipe-item row mb-2 align-items-end">
                        @* You might want a hidden field for RecipeViewModel.Id if you were doing more granular updates *@
                        @* <input type="hidden" asp-for="Recipes[i].Id" /> *@
                        <div class="col-md-5">
                            <label asp-for="Recipes[i].InventoryItemId" class="form-label small">Ingredient</label>
                            <select asp-for="Recipes[i].InventoryItemId" asp-items="ViewBag.InventoryItems" class="form-select recipe-ingredient-select">
                                <option value="">-- Select Ingredient --</option>
                            </select>
                            <span asp-validation-for="Recipes[i].InventoryItemId" class="text-danger"></span>
                        </div>
                        <div class="col-md-4">
                            <label asp-for="Recipes[i].QuantityRequired" class="form-label small">Quantity Required</label>
                            <input asp-for="Recipes[i].QuantityRequired" class="form-control" type="number" step="any" />
                            <span asp-validation-for="Recipes[i].QuantityRequired" class="text-danger"></span>
                        </div>
                        <div class="col-md-2">
                            <button type="button" class="btn btn-sm btn-outline-danger remove-recipe-btn w-100">Remove</button>
                        </div>
                    </div>
                }
            </div>
            <button type="button" id="addRecipeBtn" class="btn btn-success mt-2 mb-3"><i class="fas fa-plus"></i> Add Ingredient</button>

            <div class="form-group mt-4">
                <input type="submit" value="Save Changes" class="btn btn-primary" />
                <a asp-action="Index" class="btn btn-secondary">Back to List</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            // Initialize recipeIndex based on the number of recipes passed from the model
            let recipeIndex = @Model.Recipes.Count;

            $("#addRecipeBtn").click(function () {
                const inventoryItemsSelect = $("#viewBagInventoryItemsJson").val(); // Get JSON string
                let optionsHtml = '<option value="">-- Select Ingredient --</option>';
                 try {
                    const items = JSON.parse(inventoryItemsSelect);
                    items.forEach(function(item) {
                        optionsHtml += `<option value="${item.Value}">${item.Text}</option>`;
                    });
                } catch (e) {
                    console.error("Error parsing inventory items JSON:", e);
                    // Fallback or error display
                }


                const recipeItemHtml = `
                    <div class="recipe-item row mb-2 align-items-end">
                        <div class="col-md-5">
                            <label for="Recipes_${recipeIndex}__InventoryItemId" class="form-label small">Ingredient</label>
                            <select name="Recipes[${recipeIndex}].InventoryItemId" id="Recipes_${recipeIndex}__InventoryItemId" class="form-select recipe-ingredient-select">
                                ${optionsHtml}
                            </select>
                            <span class="text-danger field-validation-valid" data-valmsg-for="Recipes[${recipeIndex}].InventoryItemId" data-valmsg-replace="true"></span>
                        </div>
                        <div class="col-md-4">
                            <label for="Recipes_${recipeIndex}__QuantityRequired" class="form-label small">Quantity Required</label>
                            <input name="Recipes[${recipeIndex}].QuantityRequired" id="Recipes_${recipeIndex}__QuantityRequired" class="form-control" type="number" step="any" value="" />
                            <span class="text-danger field-validation-valid" data-valmsg-for="Recipes[${recipeIndex}].QuantityRequired" data-valmsg-replace="true"></span>
                        </div>
                        <div class="col-md-2">
                            <button type="button" class="btn btn-sm btn-outline-danger remove-recipe-btn w-100">Remove</button>
                        </div>
                    </div>`;
                $("#recipesContainer").append(recipeItemHtml);
                recipeIndex++;

                // Re-parse the validator for dynamically added elements
                var form = $("form");
                form.removeData("validator");
                form.removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse(form);
            });

            $("#recipesContainer").on("click", ".remove-recipe-btn", function () {
                $(this).closest(".recipe-item").remove();
                // No need to re-index for this simple remove-and-re-add strategy on the server.
                // If you were doing more complex client-side tracking or partial updates,
                // you might re-index the `name` attributes here.
            });
        });
    </script>
    @{
        // Serialize ViewBag.InventoryItems to JSON for client-side template
        var inventoryItemsForJs = (ViewBag.InventoryItems as SelectList)?.Select(sli => new { Value = sli.Value, Text = sli.Text });
    }
    <input type="hidden" id="viewBagInventoryItemsJson" value="@System.Text.Json.JsonSerializer.Serialize(inventoryItemsForJs)" />
}